    1|       |//
    2|       |//  LFBR_SwiftLibTests.swift
    3|       |//  LFBR.SwiftLibTests
    4|       |//
    5|       |//  Created by Luis Fernando Bustos Ramírez on 3/15/19.
    6|       |//  Copyright © 2019 Gastando Tenis. All rights reserved.
    7|       |//
    8|       |
    9|       |import XCTest
   10|       |@testable import LFBR_SwiftLib
   11|       |
   12|       |class LFBR_SwiftLibTests: XCTestCase {
   13|       |
   14|      4|    override func setUp() {
   15|      4|        // Put setup code here. This method is called before the invocation of each test method in the class.
   16|      4|    }
   17|       |
   18|      4|    override func tearDown() {
   19|      4|        // Put teardown code here. This method is called after the invocation of each test method in the class.
   20|      4|    }
   21|       |
   22|      1|    func testExample() {
   23|      1|        // This is an example of a functional test case.
   24|      1|        // Use XCTAssert and related functions to verify your tests produce the correct results.
   25|      1|    }
   26|       |
   27|      1|    func testPerformanceExample() {
   28|      1|        // This is an example of a performance test case.
   29|     10|        self.measure {
   30|     10|            // Put the code you want to measure the time of here.
   31|     10|        }
   32|      1|    }
   33|      1|    func testREGEX(){
   34|      1|        XCTAssert("lufe.bura@gmail.com".isEmail(), "MAIL IS VALID")
   35|      1|        XCTAssert(!"lufe.buragmail.com".isEmail(), "DONT HAVE @")
   36|      1|        XCTAssert(!"lufe.bura@gmail".isEmail(), "DONT HAVE .COM")
   37|      1|        
   38|      1|        XCTAssert("3.141519".isNumber(), "THIS IS A NUMBER")
   39|      1|        XCTAssert(!"3E23SCS".isNumber(), "IS NOT A NUMBER")
   40|      1|        
   41|      1|        XCTAssertEqual("SASDA".int, 0)
   42|      1|        XCTAssertEqual("3.1".int, 3)
   43|      1|        XCTAssertEqual("3.1415".toFloat(), 3.1415)
   44|      1|    }
   45|       |    
   46|      1|    func testCommonCrypto(){
   47|      1|        do {
   48|      1|            let sourceData = "AES256".data(using: .utf8)!
   49|      1|            let password = "password"
   50|      1|            let salt = AES256Crypter.randomSalt()
   51|      1|            let iv = AES256Crypter.randomIv()
   52|      1|            let key = try AES256Crypter.createKey(password: password.data(using: .utf8)!, salt: salt)
   53|      1|            let aes = try AES256Crypter(key: key, iv: iv)
   54|      1|            let encryptedData = try aes.encrypt(sourceData)
   55|      1|            let decryptedData = try aes.decrypt(encryptedData)
   56|      1|            
   57|      1|            
   58|      1|            print("Encrypted hex string: \(encryptedData.base64EncodedString())")
   59|      1|            print("Decrypted hex string: \(decryptedData.base64EncodedString())")
   60|      1|            
   61|      1|            XCTAssertEqual(decryptedData, sourceData)
   62|      1|            
   63|      1|        } catch {
   64|      0|            print("Failed")
   65|      0|            print(error)
   66|      0|            XCTFail()
   67|      1|        }
   68|      1|    }
   69|       |
   70|       |}

